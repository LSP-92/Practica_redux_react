{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lsp-92/Proyectos/practica-react-avanzado/react-app/src/components/adverts/AdvertsPage/AdvertsPage.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Empty, Button, Spin, List, Divider } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { mapStateToPropsAdverts } from \"../../../store/connectStore\";\nimport storage from \"../../../utils/storage\";\nimport { getAdverts } from \"../../../api/adverts\";\nimport Layout from \"../../layout\";\nimport FiltersForm, { defaultFilters } from \"./FiltersForm\";\nimport AdvertCard from \"./AdvertCard\";\n\nclass AdvertsPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      error: null,\n      filters: storage.get(\"filters\") || defaultFilters\n    };\n\n    this.formatFilters = () => {\n      const {\n        filters: {\n          name,\n          sale,\n          price,\n          tags\n        }\n      } = this.state;\n      const filters = {};\n\n      if (name) {\n        filters.name = name;\n      }\n\n      if ([\"sell\", \"buy\"].includes(sale)) {\n        filters.sale = sale === \"sell\";\n      }\n\n      if (price.length) {\n        filters.price = price.join(\"-\");\n      }\n\n      if (tags.length) {\n        filters.tags = tags.join(\",\");\n      }\n\n      return filters;\n    };\n\n    this.getAdverts = () => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      getAdverts(this.formatFilters()).then(({\n        result\n      }) => this.setState({\n        loading: false,\n        adverts: result.rows\n      })).catch(error => this.setState({\n        loading: false,\n        error\n      }));\n    };\n\n    this.handleSubmit = filters => {\n      storage.set(\"filters\", filters);\n      this.setState({\n        filters\n      });\n    };\n\n    this.renderLoading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this);\n\n    this.renderError = () => {\n      const {\n        error\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(Empty, {\n        description: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"#ff4d4f\"\n          },\n          children: `${error}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 22\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          danger: true,\n          onClick: this.getAdverts,\n          children: \"Reload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderEmpty = () => {\n      const {\n        filters\n      } = this.state;\n      const isFiltered = JSON.stringify(filters) !== JSON.stringify(defaultFilters);\n      return /*#__PURE__*/_jsxDEV(Empty, {\n        description: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"No adverts here!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 27\n        }, this),\n        children: isFiltered ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Refine your search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/adverts/new\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            children: \"Create the first one\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderAdvert = advert => {\n      return /*#__PURE__*/_jsxDEV(List.Item, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/adverts/${advert._id}`,\n          children: /*#__PURE__*/_jsxDEV(AdvertCard, { ...advert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderAdverts = () => {\n      const {\n        adverts,\n        loading,\n        error\n      } = this.state;\n\n      if (loading) {\n        return this.renderLoading();\n      }\n\n      if (error) {\n        return this.renderError();\n      }\n\n      if (!adverts) {\n        return null;\n      }\n\n      if (!adverts.length) {\n        return this.renderEmpty();\n      }\n\n      return /*#__PURE__*/_jsxDEV(List, {\n        grid: {\n          gutter: 16,\n          column: 3\n        },\n        dataSource: adverts,\n        renderItem: this.renderAdvert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.getAdverts();\n  }\n\n  componentDidUpdate(prevProps, {\n    filters: prevFilters\n  }) {\n    const {\n      filters\n    } = this.state;\n\n    if (JSON.stringify(filters) !== JSON.stringify(prevFilters)) {\n      this.getAdverts();\n    }\n  }\n\n  render() {\n    const {\n      filters\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      title: \"Adverts list\",\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        children: \"Filter your adverts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FiltersForm, {\n        initialFilters: filters,\n        onSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        children: \"Adverts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), this.renderAdverts()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst wrapper = connect(mapStateToPropsAdverts);\nconst HocAdvertsPage = wrapper(AdvertsPage);\n_c = HocAdvertsPage;\nexport default AdvertsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HocAdvertsPage\");","map":{"version":3,"sources":["/home/lsp-92/Proyectos/practica-react-avanzado/react-app/src/components/adverts/AdvertsPage/AdvertsPage.js"],"names":["React","Link","Empty","Button","Spin","List","Divider","connect","mapStateToPropsAdverts","storage","getAdverts","Layout","FiltersForm","defaultFilters","AdvertCard","AdvertsPage","Component","state","loading","error","filters","get","formatFilters","name","sale","price","tags","includes","length","join","setState","then","result","adverts","rows","catch","handleSubmit","set","renderLoading","display","justifyContent","renderError","color","renderEmpty","isFiltered","JSON","stringify","renderAdvert","advert","_id","renderAdverts","gutter","column","componentDidMount","componentDidUpdate","prevProps","prevFilters","render","wrapper","HocAdvertsPage"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,OAApC,QAAmD,MAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,IAAsBC,cAAtB,QAA4C,eAA5C;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,WAAN,SAA0Bf,KAAK,CAACgB,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,KAAK,EAAE,IAFD;AAGNC,MAAAA,OAAO,EAAEX,OAAO,CAACY,GAAR,CAAY,SAAZ,KAA0BR;AAH7B,KADgC;;AAAA,SAOxCS,aAPwC,GAOxB,MAAM;AACpB,YAAM;AACJF,QAAAA,OAAO,EAAE;AAAEG,UAAAA,IAAF;AAAQC,UAAAA,IAAR;AAAcC,UAAAA,KAAd;AAAqBC,UAAAA;AAArB;AADL,UAEF,KAAKT,KAFT;AAIA,YAAMG,OAAO,GAAG,EAAhB;;AACA,UAAIG,IAAJ,EAAU;AACRH,QAAAA,OAAO,CAACG,IAAR,GAAeA,IAAf;AACD;;AACD,UAAI,CAAC,MAAD,EAAS,KAAT,EAAgBI,QAAhB,CAAyBH,IAAzB,CAAJ,EAAoC;AAClCJ,QAAAA,OAAO,CAACI,IAAR,GAAeA,IAAI,KAAK,MAAxB;AACD;;AACD,UAAIC,KAAK,CAACG,MAAV,EAAkB;AAChBR,QAAAA,OAAO,CAACK,KAAR,GAAgBA,KAAK,CAACI,IAAN,CAAW,GAAX,CAAhB;AACD;;AACD,UAAIH,IAAI,CAACE,MAAT,EAAiB;AACfR,QAAAA,OAAO,CAACM,IAAR,GAAeA,IAAI,CAACG,IAAL,CAAU,GAAV,CAAf;AACD;;AAED,aAAOT,OAAP;AACD,KA3BuC;;AAAA,SA6BxCV,UA7BwC,GA6B3B,MAAM;AACjB,WAAKoB,QAAL,CAAc;AAAEZ,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAAd;AACAT,MAAAA,UAAU,CAAC,KAAKY,aAAL,EAAD,CAAV,CACGS,IADH,CACQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KACJ,KAAKF,QAAL,CAAc;AAAEZ,QAAAA,OAAO,EAAE,KAAX;AAAkBe,QAAAA,OAAO,EAAED,MAAM,CAACE;AAAlC,OAAd,CAFJ,EAIGC,KAJH,CAIUhB,KAAD,IAAW,KAAKW,QAAL,CAAc;AAAEZ,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA;AAAlB,OAAd,CAJpB;AAKD,KApCuC;;AAAA,SAsCxCiB,YAtCwC,GAsCxBhB,OAAD,IAAa;AAC1BX,MAAAA,OAAO,CAAC4B,GAAR,CAAY,SAAZ,EAAuBjB,OAAvB;AACA,WAAKU,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACD,KAzCuC;;AAAA,SA2CxCkB,aA3CwC,GA2CxB,mBACd;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA5CsC;;AAAA,SAiDxCC,WAjDwC,GAiD1B,MAAM;AAClB,YAAM;AAAEtB,QAAAA;AAAF,UAAY,KAAKF,KAAvB;AACA,0BACE,QAAC,KAAD;AACE,QAAA,WAAW,eAAE;AAAM,UAAA,KAAK,EAAE;AAAEyB,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA,oBAAqC,GAAEvB,KAAM;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADf;AAAA,+BAGE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,MAAM,MAA7B;AAA8B,UAAA,OAAO,EAAE,KAAKT,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KA5DuC;;AAAA,SA8DxCiC,WA9DwC,GA8D1B,MAAM;AAClB,YAAM;AAAEvB,QAAAA;AAAF,UAAc,KAAKH,KAAzB;AACA,YAAM2B,UAAU,GACdC,IAAI,CAACC,SAAL,CAAe1B,OAAf,MAA4ByB,IAAI,CAACC,SAAL,CAAejC,cAAf,CAD9B;AAEA,0BACE,QAAC,KAAD;AAAO,QAAA,WAAW,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAApB;AAAA,kBACG+B,UAAU,gBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADS,gBAGT,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,cAAT;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KA7EuC;;AAAA,SA+ExCG,YA/EwC,GA+ExBC,MAAD,IAAY;AACzB,0BACE,QAAC,IAAD,CAAM,IAAN;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,YAAWA,MAAM,CAACC,GAAI,EAAjC;AAAA,iCACE,QAAC,UAAD,OAAgBD;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KAvFuC;;AAAA,SAyFxCE,aAzFwC,GAyFxB,MAAM;AACpB,YAAM;AAAEjB,QAAAA,OAAF;AAAWf,QAAAA,OAAX;AAAoBC,QAAAA;AAApB,UAA8B,KAAKF,KAAzC;;AAEA,UAAIC,OAAJ,EAAa;AACX,eAAO,KAAKoB,aAAL,EAAP;AACD;;AAED,UAAInB,KAAJ,EAAW;AACT,eAAO,KAAKsB,WAAL,EAAP;AACD;;AAED,UAAI,CAACR,OAAL,EAAc;AACZ,eAAO,IAAP;AACD;;AAED,UAAI,CAACA,OAAO,CAACL,MAAb,EAAqB;AACnB,eAAO,KAAKe,WAAL,EAAP;AACD;;AAED,0BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAE;AAAEQ,UAAAA,MAAM,EAAE,EAAV;AAAcC,UAAAA,MAAM,EAAE;AAAtB,SADR;AAEE,QAAA,UAAU,EAAEnB,OAFd;AAGE,QAAA,UAAU,EAAE,KAAKc;AAHnB;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KAnHuC;AAAA;;AAqHxCM,EAAAA,iBAAiB,GAAG;AAClB,SAAK3C,UAAL;AACD;;AAED4C,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAAEnC,IAAAA,OAAO,EAAEoC;AAAX,GAAZ,EAAsC;AACtD,UAAM;AAAEpC,MAAAA;AAAF,QAAc,KAAKH,KAAzB;;AACA,QAAI4B,IAAI,CAACC,SAAL,CAAe1B,OAAf,MAA4ByB,IAAI,CAACC,SAAL,CAAeU,WAAf,CAAhC,EAA6D;AAC3D,WAAK9C,UAAL;AACD;AACF;;AAED+C,EAAAA,MAAM,GAAG;AACP,UAAM;AAAErC,MAAAA;AAAF,QAAc,KAAKH,KAAzB;AACA,wBACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,cAAd;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,cAAc,EAAEG,OAA7B;AAAsC,QAAA,QAAQ,EAAE,KAAKgB;AAArD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIG,KAAKc,aAAL,EAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA1IuC;;AA6I1C,MAAMQ,OAAO,GAAGnD,OAAO,CAACC,sBAAD,CAAvB;AACA,MAAMmD,cAAc,GAAGD,OAAO,CAAC3C,WAAD,CAA9B;KAAM4C,c;AAEN,eAAe5C,WAAf","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Empty, Button, Spin, List, Divider } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { mapStateToPropsAdverts } from \"../../../store/connectStore\";\nimport storage from \"../../../utils/storage\";\nimport { getAdverts } from \"../../../api/adverts\";\nimport Layout from \"../../layout\";\nimport FiltersForm, { defaultFilters } from \"./FiltersForm\";\nimport AdvertCard from \"./AdvertCard\";\n\nclass AdvertsPage extends React.Component {\n  state = {\n    loading: false,\n    error: null,\n    filters: storage.get(\"filters\") || defaultFilters,\n  };\n\n  formatFilters = () => {\n    const {\n      filters: { name, sale, price, tags },\n    } = this.state;\n\n    const filters = {};\n    if (name) {\n      filters.name = name;\n    }\n    if ([\"sell\", \"buy\"].includes(sale)) {\n      filters.sale = sale === \"sell\";\n    }\n    if (price.length) {\n      filters.price = price.join(\"-\");\n    }\n    if (tags.length) {\n      filters.tags = tags.join(\",\");\n    }\n\n    return filters;\n  };\n\n  getAdverts = () => {\n    this.setState({ loading: true, error: null });\n    getAdverts(this.formatFilters())\n      .then(({ result }) =>\n        this.setState({ loading: false, adverts: result.rows })\n      )\n      .catch((error) => this.setState({ loading: false, error }));\n  };\n\n  handleSubmit = (filters) => {\n    storage.set(\"filters\", filters);\n    this.setState({ filters });\n  };\n\n  renderLoading = () => (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <Spin size=\"large\" />\n    </div>\n  );\n\n  renderError = () => {\n    const { error } = this.state;\n    return (\n      <Empty\n        description={<span style={{ color: \"#ff4d4f\" }}>{`${error}`}</span>}\n      >\n        <Button type=\"primary\" danger onClick={this.getAdverts}>\n          Reload\n        </Button>\n      </Empty>\n    );\n  };\n\n  renderEmpty = () => {\n    const { filters } = this.state;\n    const isFiltered =\n      JSON.stringify(filters) !== JSON.stringify(defaultFilters);\n    return (\n      <Empty description={<span>No adverts here!</span>}>\n        {isFiltered ? (\n          <span>Refine your search</span>\n        ) : (\n          <Link to=\"/adverts/new\">\n            <Button type=\"primary\">Create the first one</Button>\n          </Link>\n        )}\n      </Empty>\n    );\n  };\n\n  renderAdvert = (advert) => {\n    return (\n      <List.Item>\n        <Link to={`/adverts/${advert._id}`}>\n          <AdvertCard {...advert} />\n        </Link>\n      </List.Item>\n    );\n  };\n\n  renderAdverts = () => {\n    const { adverts, loading, error } = this.state;\n\n    if (loading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      return this.renderError();\n    }\n\n    if (!adverts) {\n      return null;\n    }\n\n    if (!adverts.length) {\n      return this.renderEmpty();\n    }\n\n    return (\n      <List\n        grid={{ gutter: 16, column: 3 }}\n        dataSource={adverts}\n        renderItem={this.renderAdvert}\n      />\n    );\n  };\n\n  componentDidMount() {\n    this.getAdverts();\n  }\n\n  componentDidUpdate(prevProps, { filters: prevFilters }) {\n    const { filters } = this.state;\n    if (JSON.stringify(filters) !== JSON.stringify(prevFilters)) {\n      this.getAdverts();\n    }\n  }\n\n  render() {\n    const { filters } = this.state;\n    return (\n      <Layout title=\"Adverts list\">\n        <Divider>Filter your adverts</Divider>\n        <FiltersForm initialFilters={filters} onSubmit={this.handleSubmit} />\n        <Divider>Adverts</Divider>\n        {this.renderAdverts()}\n      </Layout>\n    );\n  }\n}\n\nconst wrapper = connect(mapStateToPropsAdverts);\nconst HocAdvertsPage = wrapper(AdvertsPage);\n\nexport default AdvertsPage;\n"]},"metadata":{},"sourceType":"module"}