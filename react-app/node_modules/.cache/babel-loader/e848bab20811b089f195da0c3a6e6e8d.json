{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lsp-92/Proyectos/practica-react-avanzado/react-app/src/components/auth/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { useAuthContext } from '../../contexts/auth';\n\nconst PrivateRoute = props => {\n  _s();\n\n  const {\n    isLogged\n  } = useAuthContext();\n  const location = useLocation();\n  return isLogged ? /*#__PURE__*/_jsxDEV(Route, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: '/login',\n      state: {\n        from: location\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"Y6ycgUp3d77O8s7dQX71nQhRIy0=\", false, function () {\n  return [useAuthContext, useLocation];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/home/lsp-92/Proyectos/practica-react-avanzado/react-app/src/components/auth/PrivateRoute.js"],"names":["React","Route","Redirect","useLocation","useAuthContext","PrivateRoute","props","isLogged","location","pathname","state","from"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,kBAA7C;AAEA,SAASC,cAAT,QAA+B,qBAA/B;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAeH,cAAc,EAAnC;AACA,QAAMI,QAAQ,GAAGL,WAAW,EAA5B;AACA,SAAOI,QAAQ,gBACb,QAAC,KAAD,OAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,UADa,gBAGb,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEG,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAA7B;AAAd;AAAA;AAAA;AAAA;AAAA,UAHF;AAKD,CARD;;GAAMH,Y;UACiBD,c,EACJD,W;;;KAFbE,Y;AAUN,eAAeA,YAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\n\nimport { useAuthContext } from '../../contexts/auth';\n\nconst PrivateRoute = props => {\n  const { isLogged } = useAuthContext();\n  const location = useLocation();\n  return isLogged ? (\n    <Route {...props} />\n  ) : (\n    <Redirect to={{ pathname: '/login', state: { from: location } }} />\n  );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}