{"ast":null,"code":"import axios from 'axios';\nconst {\n  REACT_APP_API_HOST: host,\n  REACT_APP_API_VERSION: version\n} = process.env;\nconst baseURL = `${host}/${version}`; // Create axios instance\n\nconst client = axios.create({\n  baseURL\n});\n\nconst setAuthorizationHeader = token => {\n  client.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n};\n\nconst removeAuthorizationHeader = () => {\n  delete client.defaults.headers.common['Authorization'];\n}; // Login method\n\n\nclient.login = credentials => client.post('/auth/login', credentials).then(auth => {\n  // Set Authorization header for future requests\n  setAuthorizationHeader(auth.token);\n  return auth;\n}); // Logout method\n\n\nclient.logout = () => new Promise(resolve => {\n  // Remove Authorization header\n  removeAuthorizationHeader();\n  resolve();\n}); // Intercepts response\n\n\nclient.interceptors.response.use(({\n  data: {\n    ok,\n    ...result\n  }\n}) => {\n  if (!ok) {\n    return Promise.reject(result.error);\n  }\n\n  return Promise.resolve(result);\n}, error => {\n  if (error.response) {\n    return Promise.reject(error.response.data.error);\n  }\n\n  return Promise.reject(error);\n}); // Configure client\n\nexport const configureClient = token => {\n  if (token) {\n    setAuthorizationHeader(token);\n  }\n};\nexport default client;","map":{"version":3,"sources":["/home/lsp-92/Proyectos/practica-react-avanzado/react-app/src/api/client.js"],"names":["axios","REACT_APP_API_HOST","host","REACT_APP_API_VERSION","version","process","env","baseURL","client","create","setAuthorizationHeader","token","defaults","headers","common","removeAuthorizationHeader","login","credentials","post","then","auth","logout","Promise","resolve","interceptors","response","use","data","ok","result","reject","error","configureClient"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAM;AACJC,EAAAA,kBAAkB,EAAEC,IADhB;AAEJC,EAAAA,qBAAqB,EAAEC;AAFnB,IAGFC,OAAO,CAACC,GAHZ;AAIA,MAAMC,OAAO,GAAI,GAAEL,IAAK,IAAGE,OAAQ,EAAnC,C,CAEA;;AACA,MAAMI,MAAM,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC1BF,EAAAA;AAD0B,CAAb,CAAf;;AAIA,MAAMG,sBAAsB,GAAGC,KAAK,IAAI;AACtCH,EAAAA,MAAM,CAACI,QAAP,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+B,eAA/B,IAAmD,UAASH,KAAM,EAAlE;AACD,CAFD;;AAIA,MAAMI,yBAAyB,GAAG,MAAM;AACtC,SAAOP,MAAM,CAACI,QAAP,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+B,eAA/B,CAAP;AACD,CAFD,C,CAIA;;;AACAN,MAAM,CAACQ,KAAP,GAAeC,WAAW,IACxBT,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2BD,WAA3B,EAAwCE,IAAxC,CAA6CC,IAAI,IAAI;AACnD;AACAV,EAAAA,sBAAsB,CAACU,IAAI,CAACT,KAAN,CAAtB;AACA,SAAOS,IAAP;AACD,CAJD,CADF,C,CAOA;;;AACAZ,MAAM,CAACa,MAAP,GAAgB,MACd,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrB;AACAR,EAAAA,yBAAyB;AACzBQ,EAAAA,OAAO;AACR,CAJD,CADF,C,CAOA;;;AACAf,MAAM,CAACgB,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CACE,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT;AAAR,CAAD,KAAiC;AAC/B,MAAI,CAACD,EAAL,EAAS;AACP,WAAON,OAAO,CAACQ,MAAR,CAAeD,MAAM,CAACE,KAAtB,CAAP;AACD;;AACD,SAAOT,OAAO,CAACC,OAAR,CAAgBM,MAAhB,CAAP;AACD,CANH,EAOEE,KAAK,IAAI;AACP,MAAIA,KAAK,CAACN,QAAV,EAAoB;AAClB,WAAOH,OAAO,CAACQ,MAAR,CAAeC,KAAK,CAACN,QAAN,CAAeE,IAAf,CAAoBI,KAAnC,CAAP;AACD;;AACD,SAAOT,OAAO,CAACQ,MAAR,CAAeC,KAAf,CAAP;AACD,CAZH,E,CAeA;;AACA,OAAO,MAAMC,eAAe,GAAGrB,KAAK,IAAI;AACtC,MAAIA,KAAJ,EAAW;AACTD,IAAAA,sBAAsB,CAACC,KAAD,CAAtB;AACD;AACF,CAJM;AAMP,eAAeH,MAAf","sourcesContent":["import axios from 'axios';\n\nconst {\n  REACT_APP_API_HOST: host,\n  REACT_APP_API_VERSION: version,\n} = process.env;\nconst baseURL = `${host}/${version}`;\n\n// Create axios instance\nconst client = axios.create({\n  baseURL,\n});\n\nconst setAuthorizationHeader = token => {\n  client.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n};\n\nconst removeAuthorizationHeader = () => {\n  delete client.defaults.headers.common['Authorization'];\n};\n\n// Login method\nclient.login = credentials =>\n  client.post('/auth/login', credentials).then(auth => {\n    // Set Authorization header for future requests\n    setAuthorizationHeader(auth.token);\n    return auth;\n  });\n\n// Logout method\nclient.logout = () =>\n  new Promise(resolve => {\n    // Remove Authorization header\n    removeAuthorizationHeader();\n    resolve();\n  });\n\n// Intercepts response\nclient.interceptors.response.use(\n  ({ data: { ok, ...result } }) => {\n    if (!ok) {\n      return Promise.reject(result.error);\n    }\n    return Promise.resolve(result);\n  },\n  error => {\n    if (error.response) {\n      return Promise.reject(error.response.data.error);\n    }\n    return Promise.reject(error);\n  },\n);\n\n// Configure client\nexport const configureClient = token => {\n  if (token) {\n    setAuthorizationHeader(token);\n  }\n};\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}